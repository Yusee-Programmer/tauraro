print("=" * 70)
print("TAURARO FFI DEMONSTRATION - Windows Native Library Integration")
print("=" * 70)
print("")

print("Tauraro can now call native C functions from Windows DLLs!")
print("")

print("Loading Windows kernel32.dll...")
load_library("kernel32.dll")
print("✓ Library loaded successfully")
print("")

print("Defining Windows API functions:")
print("  1. GetTickCount() -> Returns system uptime in milliseconds")
define_function("kernel32.dll", "GetTickCount", "uint32", [])
print("     ✓ Defined")

print("  2. GetCurrentProcessId() -> Returns current process ID")
define_function("kernel32.dll", "GetCurrentProcessId", "uint32", [])
print("     ✓ Defined")

print("  3. Sleep(ms) -> Pauses execution for specified milliseconds")
define_function("kernel32.dll", "Sleep", "void", ["uint32"])
print("     ✓ Defined")
print("")

print("=" * 70)
print("CALLING NATIVE WINDOWS FUNCTIONS")
print("=" * 70)
print("")

print("Getting system uptime...")
uptime_ms = call_function("kernel32.dll", "GetTickCount", [])
uptime_sec = uptime_ms / 1000
uptime_min = uptime_sec / 60
uptime_hours = uptime_min / 60
uptime_days = uptime_hours / 24

print("System has been running for:")
print(f"  - {uptime_ms} milliseconds")
print(f"  - {uptime_sec} seconds")
print(f"  - {uptime_min} minutes")
print(f"  - {uptime_hours} hours")
print(f"  - {uptime_days} days")
print("")

print("Getting current process information...")
pid = call_function("kernel32.dll", "GetCurrentProcessId", [])
print(f"  - Process ID: {pid}")
print(f"  - This Tauraro interpreter is running as PID {pid}")
print("")

print("Testing precise timing with Sleep function...")
print("  Measuring 250ms sleep...")
start = call_function("kernel32.dll", "GetTickCount", [])
call_function("kernel32.dll", "Sleep", [250])
end = call_function("kernel32.dll", "GetTickCount", [])
actual_sleep = end - start
print(f"  - Requested: 250 ms")
print(f"  - Actual: {actual_sleep} ms")
print(f"  - Accuracy: {(actual_sleep / 250) * 100}%")
print("")

print("=" * 70)
print("FFI SYSTEM SUMMARY")
print("=" * 70)
libs = list_libraries()
print(f"Loaded libraries: {len(libs)}")
for lib in libs:
    info = library_info(lib)
    print(f"  • {lib}")
    print(f"    Path: {info['path']}")
    print(f"    Functions defined: {info['functions']}")
print("")

print("=" * 70)
print("✓ FFI SYSTEM FULLY OPERATIONAL")
print("=" * 70)
print("")
print("This demonstrates Tauraro's ability to:")
print("  ✓ Load native DLL libraries on Windows")
print("  ✓ Define function signatures with proper types")
print("  ✓ Call external C functions with correct ABI")
print("  ✓ Marshal data between Tauraro and native code")
print("  ✓ Handle different return types (void, uint32)")
print("  ✓ Pass parameters to native functions")
print("")
print("The same FFI system works on:")
print("  • Windows (DLL files)")
print("  • Linux (SO files)")
print("  • macOS (dylib files)")
print("  • iOS, Android, and embedded systems")
print("")
print("FFI enables Tauraro to integrate with ANY native library!")
