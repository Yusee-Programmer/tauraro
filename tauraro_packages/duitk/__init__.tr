# DUITK Package Initialization
# Desktop UI Toolkit - A high-level GUI framework for Tauraro built on win32

print("Loading DUITK - Desktop UI Toolkit...")

# Version information
version = "1.0.0"
name = "DUITK"
description = "Desktop UI Toolkit for Tauraro"

# Core DUITK classes and functions

class Application:
    def __init__(self):
        self.windows = []
        self.running = False
    
    def create_window(self, title: str, width: int, height: int):
        # Deferred import to avoid circular dependencies
        import duitk.window
        window = Window(title, width, height)
        self.windows.append(window)
        return window
    
    def run(self):
        self.running = True
        # Main message loop
        import win32.user32
        import duitk.events
        
        msg = win32.user32.MSG()
        while self.running:
            result = duitk.events.get_message(msg, 0, 0, 0)
            if result == 0:  # WM_QUIT
                break
            duitk.events.translate_and_dispatch_message(msg)
    
    def quit(self):
        self.running = False
        import duitk.events
        duitk.events.post_quit_message(0)

class Window:
    def __init__(self, title: str, width: int, height: int):
        import duitk.window
        self.hwnd = duitk.window.create_window(title, width, height)
        self.title = title
        self.width = width
        self.height = height
        self.controls = []
        self.on_close = None
    
    def show(self, cmd_show: int = 5):  # SW_SHOW = 5
        import duitk.window
        duitk.window.show_window(self.hwnd, cmd_show)
        duitk.window.update_window(self.hwnd)
    
    def hide(self):
        import win32.user32
        win32.user32.ShowWindow(self.hwnd, 0)  # SW_HIDE = 0
    
    def set_title(self, title: str):
        import duitk.window
        duitk.window.set_window_text(self.hwnd, title)
        self.title = title
    
    def get_title(self):
        import duitk.window
        return duitk.window.get_window_text(self.hwnd)
    
    def move(self, x: int, y: int, width: int, height: int):
        import win32.user32
        win32.user32.MoveWindow(self.hwnd, x, y, width, height, True)
        self.width = width
        self.height = height
    
    def get_rect(self):
        import win32.user32
        rect = win32.user32.RECT()
        if win32.user32.GetWindowRect(self.hwnd, rect):
            return (rect.left, rect.top, rect.right, rect.bottom)
        return None
    
    def create_button(self, text: str, x: int, y: int, width: int, height: int):
        button = Button(self.hwnd, text, x, y, width, height)
        self.controls.append(button)
        return button
    
    def create_label(self, text: str, x: int, y: int, width: int, height: int):
        label = Label(self.hwnd, text, x, y, width, height)
        self.controls.append(label)
        return label
    
    def create_edit(self, text: str, x: int, y: int, width: int, height: int):
        edit = Edit(self.hwnd, text, x, y, width, height)
        self.controls.append(edit)
        return edit

class Control:
    def __init__(self, parent_hwnd: int, hwnd: int):
        self.parent_hwnd = parent_hwnd
        self.hwnd = hwnd
        self.on_click = None
    
    def set_text(self, text: str):
        import duitk.controls
        duitk.controls.set_control_text(self.hwnd, text)
    
    def get_text(self):
        import duitk.controls
        return duitk.controls.get_control_text(self.hwnd)
    
    def show(self):
        import win32.user32
        win32.user32.ShowWindow(self.hwnd, 5)  # SW_SHOW
    
    def hide(self):
        import win32.user32
        win32.user32.ShowWindow(self.hwnd, 0)  # SW_HIDE

class Button(Control):
    def __init__(self, parent_hwnd: int, text: str, x: int, y: int, width: int, height: int):
        import duitk.controls
        hwnd = duitk.controls.create_button(parent_hwnd, text, x, y, width, height)
        super().__init__(parent_hwnd, hwnd)

class Label(Control):
    def __init__(self, parent_hwnd: int, text: str, x: int, y: int, width: int, height: int):
        import duitk.controls
        hwnd = duitk.controls.create_label(parent_hwnd, text, x, y, width, height)
        super().__init__(parent_hwnd, hwnd)

class Edit(Control):
    def __init__(self, parent_hwnd: int, text: str, x: int, y: int, width: int, height: int):
        import duitk.controls
        hwnd = duitk.controls.create_edit(parent_hwnd, text, x, y, width, height)
        super().__init__(parent_hwnd, hwnd)

# Utility functions

def get_screen_size():
    import win32.user32
    width = win32.user32.GetSystemMetrics(0)  # SM_CXSCREEN
    height = win32.user32.GetSystemMetrics(1)  # SM_CYSCREEN
    return (width, height)

def message_box(hwnd: int, text: str, caption: str, type: int = 0):
    import duitk.dialogs
    return duitk.dialogs.message_box(hwnd, text, caption, type)

def run_simple_app(main_window_func):
    app = Application()
    main_window_func(app)
    app.run()
    return app

print("DUITK - Desktop UI Toolkit loaded successfully!")