#!/usr/bin/env tauraro
"""
Tutorial: Getting Started with TauraroLang

This tutorial provides a comprehensive introduction to TauraroLang,
covering all the essential concepts you need to start programming
in this powerful language.

What you'll learn:
- Basic syntax and program structure
- Variables and data types
- Functions and control flow
- Data structures (arrays and dictionaries)
- Object-oriented programming basics
- Error handling
- Best practices

Usage:
    tauraro run examples/tutorials/getting_started.tr
    
Requirements:
    - TauraroLang compiler/interpreter
"""

fn main() {
    print("ðŸš€ Welcome to TauraroLang!")
    print("This tutorial will guide you through the basics of TauraroLang programming.")
    print("=" * 60)
    
    // LESSON 1: Basic Syntax and Program Structure
    print("\nðŸ“š LESSON 1: Basic Syntax and Program Structure")
    print("-" * 50)
    
    print("Every TauraroLang program starts with a main() function:")
    print("fn main() {")
    print("    // Your code goes here")
    print("}")
    
    print("\nComments start with // for single line")
    print("/* Multi-line comments")
    print("   work like this */")
    
    // LESSON 2: Variables and Data Types
    print("\nðŸ“š LESSON 2: Variables and Data Types")
    print("-" * 50)
    
    print("Variables are declared with 'let':")
    
    // Numbers
    let age = 25
    let height = 5.9
    print("Integer: " + str(age))
    print("Float: " + str(height))
    
    // Strings
    let name = "Alice"
    let greeting = "Hello, " + name + "!"
    print("String: " + greeting)
    
    // Booleans
    let is_student = true
    let has_job = false
    print("Boolean: " + str(is_student))
    
    print("\nTauraroLang has dynamic typing - variables can change type:")
    let dynamic_var = 42
    print("dynamic_var as number: " + str(dynamic_var))
    dynamic_var = "Now I'm a string!"
    print("dynamic_var as string: " + dynamic_var)
    
    // LESSON 3: Basic Operations
    print("\nðŸ“š LESSON 3: Basic Operations")
    print("-" * 50)
    
    let a = 10
    let b = 3
    
    print("Arithmetic operations:")
    print(str(a) + " + " + str(b) + " = " + str(a + b))
    print(str(a) + " - " + str(b) + " = " + str(a - b))
    print(str(a) + " * " + str(b) + " = " + str(a * b))
    print(str(a) + " / " + str(b) + " = " + str(a / b))
    print(str(a) + " % " + str(b) + " = " + str(a % b))
    
    print("\nComparison operations:")
    print(str(a) + " > " + str(b) + " = " + str(a > b))
    print(str(a) + " < " + str(b) + " = " + str(a < b))
    print(str(a) + " == " + str(b) + " = " + str(a == b))
    print(str(a) + " != " + str(b) + " = " + str(a != b))
    
    print("\nLogical operations:")
    let x = true
    let y = false
    print("true && false = " + str(x && y))
    print("true || false = " + str(x || y))
    print("!true = " + str(!x))
    
    // LESSON 4: Control Flow
    print("\nðŸ“š LESSON 4: Control Flow")
    print("-" * 50)
    
    print("If statements:")
    let score = 85
    if score >= 90 {
        print("Grade: A")
    } else if score >= 80 {
        print("Grade: B")
    } else if score >= 70 {
        print("Grade: C")
    } else {
        print("Grade: F")
    }
    
    print("\nWhile loops:")
    let counter = 1
    print("Counting to 3:")
    while counter <= 3 {
        print("  " + str(counter))
        counter = counter + 1
    }
    
    print("\nFor-like iteration with while:")
    let numbers = [1, 2, 3, 4, 5]
    let i = 0
    print("Numbers in array:")
    while i < len(numbers) {
        print("  Index " + str(i) + ": " + str(numbers[i]))
        i = i + 1
    }
    
    // LESSON 5: Functions
    print("\nðŸ“š LESSON 5: Functions")
    print("-" * 50)
    
    print("Functions are defined with 'fn' keyword:")
    
    // Call the helper functions defined below
    simple_greeting()
    greet_with_name("Bob")
    
    let sum = add_numbers(15, 25)
    print("15 + 25 = " + str(sum))
    
    let factorial_5 = calculate_factorial(5)
    print("5! = " + str(factorial_5))
    
    // LESSON 6: Data Structures
    print("\nðŸ“š LESSON 6: Data Structures")
    print("-" * 50)
    
    print("Arrays (lists):")
    let fruits = ["apple", "banana", "orange"]
    print("Fruits: " + str(fruits))
    print("First fruit: " + fruits[0])
    print("Number of fruits: " + str(len(fruits)))
    
    // Add to array (simulated)
    fruits[len(fruits)] = "grape"  // This might not work in all implementations
    print("After adding grape: " + str(fruits))
    
    print("\nDictionaries (objects):")
    let person = {
        "name": "Charlie",
        "age": 30,
        "city": "New York",
        "hobbies": ["reading", "swimming", "coding"]
    }
    
    print("Person: " + str(person))
    print("Name: " + person["name"])
    print("Age: " + str(person["age"]))
    print("Hobbies: " + str(person["hobbies"]))
    
    // LESSON 7: Working with Collections
    print("\nðŸ“š LESSON 7: Working with Collections")
    print("-" * 50)
    
    let grades = [88, 92, 76, 95, 83]
    print("Grades: " + str(grades))
    
    // Calculate average
    let total = 0
    let grade_index = 0
    while grade_index < len(grades) {
        total = total + grades[grade_index]
        grade_index = grade_index + 1
    }
    let average = total / len(grades)
    print("Average grade: " + str(average))
    
    // Find highest grade
    let highest = grades[0]
    let high_index = 1
    while high_index < len(grades) {
        if grades[high_index] > highest {
            highest = grades[high_index]
        }
        high_index = high_index + 1
    }
    print("Highest grade: " + str(highest))
    
    // LESSON 8: Error Handling
    print("\nðŸ“š LESSON 8: Error Handling")
    print("-" * 50)
    
    print("Use try/catch for error handling:")
    
    try {
        let result = risky_division(10, 2)
        print("10 / 2 = " + str(result))
        
        let bad_result = risky_division(10, 0)
        print("This won't print")
    } catch error {
        print("Caught an error: " + str(error))
    }
    
    // LESSON 9: Best Practices
    print("\nðŸ“š LESSON 9: Best Practices")
    print("-" * 50)
    
    print("1. Use descriptive variable names:")
    let user_age = 25  // Good
    let a = 25         // Bad
    
    print("2. Keep functions small and focused:")
    print("3. Handle errors appropriately")
    print("4. Use comments to explain complex logic")
    print("5. Follow consistent naming conventions")
    
    // LESSON 10: Next Steps
    print("\nðŸ“š LESSON 10: Next Steps")
    print("-" * 50)
    
    print("Congratulations! You've learned the basics of TauraroLang!")
    print("\nNext, explore these advanced topics:")
    print("â€¢ Object-oriented programming (classes)")
    print("â€¢ Advanced functions (lambdas, closures)")
    print("â€¢ FFI (Foreign Function Interface)")
    print("â€¢ Python interoperability")
    print("â€¢ Asynchronous programming")
    print("â€¢ Web development")
    
    print("\nCheck out more examples in:")
    print("â€¢ examples/advanced/ - Advanced programming concepts")
    print("â€¢ examples/interop/ - FFI and Python integration")
    print("â€¢ examples/web/ - Web development")
    print("â€¢ examples/data-science/ - Data analysis")
    
    print("\nðŸŽ‰ Happy coding with TauraroLang!")
}

// Helper functions for the tutorial

fn simple_greeting() {
    print("Hello from a function!")
}

fn greet_with_name(name) {
    print("Hello, " + name + "!")
}

fn add_numbers(x, y) {
    return x + y
}

fn calculate_factorial(n) {
    if n <= 1 {
        return 1
    }
    return n * calculate_factorial(n - 1)
}

fn risky_division(a, b) {
    if b == 0 {
        throw "Division by zero error"
    }
    return a / b
}