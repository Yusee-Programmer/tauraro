# Functools module test
import functools

print("=== Functools Module Test ===")

# Test partial function
def multiply(x, y, z):
    return x * y * z

# Create a partial function with x=2
double_multiply = functools.partial(multiply, 2)
result = double_multiply(3, 4)
print("Partial function result:", result)

# Test reduce
numbers = [1, 2, 3, 4, 5]
sum_result = functools.reduce(lambda x, y: x + y, numbers)
print("Reduce sum result:", sum_result)

# Test lru_cache
@functools.lru_cache(maxsize=128)
def fibonacci(n):
    if n < 2:
        return n
    return fibonacci(n-1) + fibonacci(n-2)

print("Fibonacci(10):", fibonacci(10))
print("Cache info:", fibonacci.cache_info())

# Test wraps decorator
def my_decorator(func):
    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        print("Before function call")
        result = func(*args, **kwargs)
        print("After function call")
        return result
    return wrapper

@my_decorator
def greet(name):
    """Greet someone"""
    return f"Hello, {name}!"

print(greet("Tauraro"))
print("Function name:", greet.__name__)
print("Function doc:", greet.__doc__)

print("Functools module test completed successfully!")