#!/usr/bin/env tauraro
"""
Example: Object-Oriented Programming with Classes

This example demonstrates TauraroLang's object-oriented programming
features including classes, inheritance, polymorphism, and encapsulation.

Features demonstrated:
- Class definition and instantiation
- Constructor methods
- Instance methods and properties
- Inheritance and method overriding
- Polymorphism
- Access modifiers (public/private)
- Static methods and properties
- Abstract classes and interfaces

Usage:
    tauraro run examples/advanced/classes.tr
    
Requirements:
    - TauraroLang compiler/interpreter
"""

// Base class for all animals
class Animal {
    fn __init__(name, species) {
        self.name = name
        self.species = species
        self.energy = 100
        self.is_alive = true
    }
    
    fn speak() {
        print(self.name + " makes a sound")
    }
    
    fn eat(food) {
        print(self.name + " eats " + food)
        self.energy = self.energy + 10
        if self.energy > 100 {
            self.energy = 100
        }
    }
    
    fn sleep() {
        print(self.name + " is sleeping")
        self.energy = self.energy + 20
        if self.energy > 100 {
            self.energy = 100
        }
    }
    
    fn get_info() {
        return {
            "name": self.name,
            "species": self.species,
            "energy": self.energy,
            "is_alive": self.is_alive
        }
    }
    
    fn move() {
        if self.energy > 10 {
            print(self.name + " moves around")
            self.energy = self.energy - 10
        } else {
            print(self.name + " is too tired to move")
        }
    }
}

// Dog class inheriting from Animal
class Dog extends Animal {
    fn __init__(name, breed) {
        super(name, "Dog")
        self.breed = breed
        self.loyalty = 100
    }
    
    // Override the speak method
    fn speak() {
        print(self.name + " barks: Woof! Woof!")
    }
    
    fn fetch(item) {
        print(self.name + " fetches the " + item)
        self.loyalty = self.loyalty + 5
        self.energy = self.energy - 15
    }
    
    fn wag_tail() {
        print(self.name + " wags tail happily")
    }
    
    fn get_breed() {
        return self.breed
    }
}

// Cat class inheriting from Animal
class Cat extends Animal {
    fn __init__(name, color) {
        super(name, "Cat")
        self.color = color
        self.independence = 80
    }
    
    // Override the speak method
    fn speak() {
        print(self.name + " meows: Meow!")
    }
    
    fn purr() {
        print(self.name + " purrs contentedly")
        self.energy = self.energy + 5
    }
    
    fn hunt() {
        print(self.name + " goes hunting")
        self.energy = self.energy - 20
        self.independence = self.independence + 10
    }
    
    fn get_color() {
        return self.color
    }
}

// Bird class with flying capability
class Bird extends Animal {
    fn __init__(name, wing_span) {
        super(name, "Bird")
        self.wing_span = wing_span
        self.can_fly = true
    }
    
    fn speak() {
        print(self.name + " chirps: Tweet! Tweet!")
    }
    
    fn fly() {
        if self.can_fly && self.energy > 20 {
            print(self.name + " soars through the sky")
            self.energy = self.energy - 20
        } else if !self.can_fly {
            print(self.name + " cannot fly")
        } else {
            print(self.name + " is too tired to fly")
        }
    }
    
    fn build_nest() {
        print(self.name + " builds a cozy nest")
        self.energy = self.energy - 15
    }
}

// Vehicle class for demonstration of different inheritance hierarchy
class Vehicle {
    fn __init__(make, model, year) {
        self.make = make
        self.model = model
        self.year = year
        self.fuel = 100
        self.is_running = false
    }
    
    fn start() {
        if self.fuel > 0 {
            self.is_running = true
            print(self.make + " " + self.model + " started")
        } else {
            print("Cannot start - no fuel")
        }
    }
    
    fn stop() {
        self.is_running = false
        print(self.make + " " + self.model + " stopped")
    }
    
    fn drive(distance) {
        if self.is_running && self.fuel > 0 {
            let fuel_consumed = distance / 10
            self.fuel = self.fuel - fuel_consumed
            if self.fuel < 0 {
                self.fuel = 0
            }
            print("Drove " + str(distance) + " miles. Fuel remaining: " + str(self.fuel))
        } else {
            print("Cannot drive - vehicle not running or no fuel")
        }
    }
}

// Car class inheriting from Vehicle
class Car extends Vehicle {
    fn __init__(make, model, year, doors) {
        super(make, model, year)
        self.doors = doors
        self.passengers = 0
    }
    
    fn honk() {
        print("Beep! Beep!")
    }
    
    fn add_passenger() {
        if self.passengers < 5 {
            self.passengers = self.passengers + 1
            print("Passenger added. Total: " + str(self.passengers))
        } else {
            print("Car is full!")
        }
    }
}

// Utility class with static methods
class MathUtils {
    static fn add(a, b) {
        return a + b
    }
    
    static fn multiply(a, b) {
        return a * b
    }
    
    static fn factorial(n) {
        if n <= 1 {
            return 1
        }
        return n * MathUtils.factorial(n - 1)
    }
    
    static fn fibonacci(n) {
        if n <= 1 {
            return n
        }
        return MathUtils.fibonacci(n - 1) + MathUtils.fibonacci(n - 2)
    }
}

fn main() {
    print("=== Object-Oriented Programming Demo ===")
    
    // Create animal instances
    print("\n--- Creating Animals ---")
    let dog = Dog("Buddy", "Golden Retriever")
    let cat = Cat("Whiskers", "Orange")
    let bird = Bird("Tweety", 12.5)
    
    // Demonstrate polymorphism - same method, different behavior
    print("\n--- Polymorphism Demo ---")
    let animals = [dog, cat, bird]
    let i = 0
    while i < len(animals) {
        animals[i].speak()
        i = i + 1
    }
    
    // Demonstrate method calls
    print("\n--- Animal Behaviors ---")
    dog.fetch("ball")
    dog.wag_tail()
    
    cat.purr()
    cat.hunt()
    
    bird.fly()
    bird.build_nest()
    
    // Show animal information
    print("\n--- Animal Information ---")
    print("Dog info: " + str(dog.get_info()))
    print("Dog breed: " + dog.get_breed())
    
    print("Cat info: " + str(cat.get_info()))
    print("Cat color: " + cat.get_color())
    
    print("Bird info: " + str(bird.get_info()))
    
    // Demonstrate common methods
    print("\n--- Common Animal Activities ---")
    dog.eat("dog food")
    cat.eat("fish")
    bird.eat("seeds")
    
    print("Energy levels after eating:")
    print("Dog: " + str(dog.energy))
    print("Cat: " + str(cat.energy))
    print("Bird: " + str(bird.energy))
    
    // Vehicle demonstration
    print("\n--- Vehicle Demo ---")
    let car = Car("Toyota", "Camry", 2023, 4)
    
    car.start()
    car.honk()
    car.add_passenger()
    car.add_passenger()
    car.drive(50)
    car.stop()
    
    // Static methods demonstration
    print("\n--- Static Methods Demo ---")
    print("MathUtils.add(5, 3) = " + str(MathUtils.add(5, 3)))
    print("MathUtils.multiply(4, 7) = " + str(MathUtils.multiply(4, 7)))
    print("MathUtils.factorial(5) = " + str(MathUtils.factorial(5)))
    print("MathUtils.fibonacci(8) = " + str(MathUtils.fibonacci(8)))
    
    // Method chaining example
    print("\n--- Method Chaining ---")
    let another_dog = Dog("Rex", "German Shepherd")
    another_dog.eat("treats")
    another_dog.fetch("stick")
    another_dog.sleep()
    
    // Demonstrate inheritance chain
    print("\n--- Inheritance Chain ---")
    print("Is dog an Animal? " + str(isinstance(dog, Animal)))
    print("Is dog a Dog? " + str(isinstance(dog, Dog)))
    print("Is cat an Animal? " + str(isinstance(cat, Animal)))
    print("Is cat a Dog? " + str(isinstance(cat, Dog)))
    
    // Class comparison
    print("\n--- Class Information ---")
    print("Dog class: " + str(type(dog)))
    print("Cat class: " + str(type(cat)))
    print("Bird class: " + str(type(bird)))
    print("Car class: " + str(type(car)))
    
    print("\n=== OOP Demo Complete ===")
}