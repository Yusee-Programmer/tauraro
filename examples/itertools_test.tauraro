# Itertools module test
import itertools

print("=== Itertools Module Test ===")

# Test count
counter = itertools.count(10, 2)
print("Count (first 5):", [next(counter) for _ in range(5)])

# Test cycle
cycler = itertools.cycle(['A', 'B', 'C'])
print("Cycle (first 5):", [next(cycler) for _ in range(5)])

# Test repeat
repeater = itertools.repeat('Tauraro', 3)
print("Repeat:", list(repeater))

# Test chain
list1 = [1, 2, 3]
list2 = ['a', 'b', 'c']
chained = list(itertools.chain(list1, list2))
print("Chained:", chained)

# Test chain.from_iterable
nested_lists = [[1, 2], [3, 4], [5, 6]]
chained_nested = list(itertools.chain.from_iterable(nested_lists))
print("Chained nested:", chained_nested)

# Test compress
data = ['A', 'B', 'C', 'D']
selectors = [True, False, True, False]
compressed = list(itertools.compress(data, selectors))
print("Compressed:", compressed)

# Test combinations
items = ['A', 'B', 'C']
combinations = list(itertools.combinations(items, 2))
print("Combinations:", combinations)

# Test combinations with replacement
comb_with_replacement = list(itertools.combinations_with_replacement(items, 2))
print("Combinations with replacement:", comb_with_replacement)

# Test permutations
permutations = list(itertools.permutations(items, 2))
print("Permutations:", permutations)

# Test accumulate
numbers = [1, 2, 3, 4, 5]
accumulated = list(itertools.accumulate(numbers))
print("Accumulated:", accumulated)

# Test accumulate with custom function
import operator
accumulated_mult = list(itertools.accumulate(numbers, operator.mul))
print("Accumulated (multiplication):", accumulated_mult)

# Test product
product_result = list(itertools.product([1, 2], ['a', 'b']))
print("Product:", product_result)

# Test groupby
data = [('a', 1), ('a', 2), ('b', 3), ('b', 4)]
grouped = [(k, list(g)) for k, g in itertools.groupby(data, key=lambda x: x[0])]
print("Grouped:", grouped)

# Test islice
sliced = list(itertools.islice(range(10), 2, 8, 2))
print("Isliced:", sliced)

# Test starmap
pairs = [(2, 5), (3, 2), (10, 3)]
powered = list(itertools.starmap(pow, pairs))
print("Starmap:", powered)

# Test takewhile and dropwhile
numbers = [1, 2, 3, 4, 5, 1, 2]
taken = list(itertools.takewhile(lambda x: x < 4, numbers))
dropped = list(itertools.dropwhile(lambda x: x < 4, numbers))
print("Takewhile:", taken)
print("Dropwhile:", dropped)

# Test tee
iter1, iter2 = itertools.tee([1, 2, 3], 2)
print("Tee iter1:", list(iter1))
print("Tee iter2:", list(iter2))

# Test zip_longest
zipped = list(itertools.zip_longest([1, 2], ['a', 'b', 'c'], fillvalue='X'))
print("Zip longest:", zipped)

print("Itertools module test completed successfully!")