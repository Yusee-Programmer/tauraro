#!/usr/bin/env tauraro
"""
Example: Basic Python Interoperability

This example demonstrates how to use TauraroLang's Python interoperability
features to call Python functions and work with Python objects.

Features demonstrated:
- Importing Python modules
- Calling Python functions
- Working with Python objects
- Type conversion between TauraroLang and Python
- Error handling with Python code
- Using popular Python libraries

Usage:
    # Compile TauraroLang with Python interop support
    cargo build --features python-interop
    
    # Run the example
    tauraro run examples/interop/python_basic.tr
    
Requirements:
    - TauraroLang with python-interop feature enabled
    - Python 3.x installed
    - Python libraries: math, json, datetime (standard library)
"""

fn main() {
    print("=== Python Interoperability Demo ===")
    
    // Import Python's math module
    print("\n--- Python Math Module ---")
    let math = python_import("math")
    
    if math != null {
        print("Successfully imported Python math module")
        
        // Call Python math functions
        let pi_value = python_call(math, "pi", [])
        print("math.pi = " + str(pi_value))
        
        let sqrt_result = python_call(math, "sqrt", [16])
        print("math.sqrt(16) = " + str(sqrt_result))
        
        let sin_result = python_call(math, "sin", [pi_value / 2])
        print("math.sin(Ï€/2) = " + str(sin_result))
        
        let log_result = python_call(math, "log", [10])
        print("math.log(10) = " + str(log_result))
    } else {
        print("Failed to import Python math module")
    }
    
    // Work with Python's json module
    print("\n--- Python JSON Module ---")
    let json = python_import("json")
    
    if json != null {
        print("Successfully imported Python json module")
        
        // Create a TauraroLang dictionary and convert to JSON
        let data = {
            "name": "TauraroLang",
            "version": "1.0",
            "features": ["FFI", "Python Interop", "Multiple Backends"],
            "is_awesome": true
        }
        
        let json_string = python_call(json, "dumps", [data])
        print("Data as JSON: " + str(json_string))
        
        // Parse JSON back to object
        let parsed_data = python_call(json, "loads", [json_string])
        print("Parsed back: " + str(parsed_data))
        print("Name from parsed data: " + str(parsed_data["name"]))
    }
    
    // Work with Python's datetime module
    print("\n--- Python DateTime Module ---")
    let datetime = python_import("datetime")
    
    if datetime != null {
        print("Successfully imported Python datetime module")
        
        // Get current datetime
        let now = python_call(datetime, "now", [])
        print("Current datetime: " + str(now))
        
        // Create a specific date
        let date_class = python_getattr(datetime, "date")
        let specific_date = python_call(date_class, "", [2024, 1, 1])
        print("Specific date (2024-01-01): " + str(specific_date))
        
        // Format date
        let formatted = python_call(specific_date, "strftime", ["%Y-%m-%d"])
        print("Formatted date: " + str(formatted))
    }
    
    // Execute Python code directly
    print("\n--- Direct Python Code Execution ---")
    
    let python_code = "
def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n-1) + fibonacci(n-2)

def factorial(n):
    if n <= 1:
        return 1
    return n * factorial(n-1)

# Create a list of results
results = []
for i in range(1, 6):
    fib = fibonacci(i)
    fact = factorial(i)
    results.append({'n': i, 'fibonacci': fib, 'factorial': fact})
"
    
    python_exec(python_code)
    
    // Access variables from executed Python code
    let results = python_eval("results")
    print("Results from Python code: " + str(results))
    
    // Iterate through Python results
    let i = 0
    while i < len(results) {
        let result = results[i]
        let n = result["n"]
        let fib = result["fibonacci"]
        let fact = result["factorial"]
        print("n=" + str(n) + ": fibonacci=" + str(fib) + ", factorial=" + str(fact))
        i = i + 1
    }
    
    // Working with Python lists and dictionaries
    print("\n--- Python Data Structures ---")
    
    // Create Python list
    let py_list = python_eval("[1, 2, 3, 4, 5]")
    print("Python list: " + str(py_list))
    
    // Append to Python list
    python_call(py_list, "append", [6])
    print("After append: " + str(py_list))
    
    // Create Python dictionary
    let py_dict = python_eval("{'a': 1, 'b': 2, 'c': 3}")
    print("Python dict: " + str(py_dict))
    
    // Access dictionary items
    let keys = python_call(py_dict, "keys", [])
    print("Dictionary keys: " + str(keys))
    
    // Error handling with Python
    print("\n--- Error Handling ---")
    
    try {
        // This will cause a Python error
        let result = python_eval("1 / 0")
        print("This shouldn't print")
    } catch error {
        print("Caught Python error: " + str(error))
    }
    
    try {
        // Import non-existent module
        let fake_module = python_import("nonexistent_module_12345")
        print("This shouldn't print either")
    } catch error {
        print("Caught import error: " + str(error))
    }
    
    // Type conversion examples
    print("\n--- Type Conversions ---")
    
    // TauraroLang to Python
    let tauraro_array = [1, 2, 3, 4, 5]
    let python_list = to_python_list(tauraro_array)
    print("TauraroLang array -> Python list: " + str(python_list))
    
    let tauraro_dict = {"name": "Alice", "age": 30}
    let python_dict = to_python_dict(tauraro_dict)
    print("TauraroLang dict -> Python dict: " + str(python_dict))
    
    // Python to TauraroLang
    let py_data = python_eval("{'numbers': [10, 20, 30], 'text': 'Hello'}")
    let tauraro_data = from_python(py_data)
    print("Python dict -> TauraroLang: " + str(tauraro_data))
    
    // Working with Python classes
    print("\n--- Python Classes ---")
    
    let class_code = "
class Calculator:
    def __init__(self):
        self.history = []
    
    def add(self, a, b):
        result = a + b
        self.history.append(f'{a} + {b} = {result}')
        return result
    
    def multiply(self, a, b):
        result = a * b
        self.history.append(f'{a} * {b} = {result}')
        return result
    
    def get_history(self):
        return self.history

calc = Calculator()
"
    
    python_exec(class_code)
    
    // Use the Python class
    let calculator = python_eval("calc")
    
    let sum_result = python_call(calculator, "add", [5, 3])
    print("Calculator.add(5, 3) = " + str(sum_result))
    
    let mult_result = python_call(calculator, "multiply", [4, 7])
    print("Calculator.multiply(4, 7) = " + str(mult_result))
    
    let history = python_call(calculator, "get_history", [])
    print("Calculator history: " + str(history))
    
    print("\n=== Python Interop Demo Complete ===")
}