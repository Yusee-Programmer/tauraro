#!/usr/bin/env tauraro
"""
Example: Data Structures

This example demonstrates TauraroLang's built-in data structures
including arrays, dictionaries, and basic data manipulation.

Features demonstrated:
- Array creation and manipulation
- Dictionary creation and access
- Nested data structures
- Data structure operations
- Iteration over collections
- Common data structure patterns

Usage:
    tauraro run examples/basic/data_structures.tr
    
Requirements:
    - TauraroLang compiler/interpreter
"""

fn main() {
    print("=== Data Structures Demo ===")
    
    // Arrays
    print("\n--- Arrays ---")
    let numbers = [1, 2, 3, 4, 5]
    print("Numbers array: " + str(numbers))
    print("First element: " + str(numbers[0]))
    print("Last element: " + str(numbers[len(numbers) - 1]))
    print("Array length: " + str(len(numbers)))
    
    // Array modification
    numbers[2] = 10
    print("After modifying index 2: " + str(numbers))
    
    // Mixed type array
    let mixed = [1, "hello", 3.14, true]
    print("Mixed array: " + str(mixed))
    
    // Array operations
    print("\n--- Array Operations ---")
    let fruits = ["apple", "banana", "orange"]
    print("Original fruits: " + str(fruits))
    
    // Adding elements (simulated with new array creation)
    let more_fruits = fruits + ["grape", "kiwi"]
    print("With more fruits: " + str(more_fruits))
    
    // Array iteration
    print("Iterating through fruits:")
    let i = 0
    while i < len(fruits) {
        print("  " + str(i) + ": " + fruits[i])
        i = i + 1
    }
    
    // Dictionaries
    print("\n--- Dictionaries ---")
    let person = {
        "name": "Alice",
        "age": 30,
        "city": "New York",
        "is_student": false
    }
    
    print("Person dictionary: " + str(person))
    print("Name: " + person["name"])
    print("Age: " + str(person["age"]))
    print("City: " + person["city"])
    
    // Dictionary modification
    person["age"] = 31
    person["occupation"] = "Engineer"
    print("After modification: " + str(person))
    
    // Nested data structures
    print("\n--- Nested Data Structures ---")
    let company = {
        "name": "TechCorp",
        "employees": [
            {
                "name": "John",
                "position": "Developer",
                "skills": ["Python", "JavaScript", "TauraroLang"]
            },
            {
                "name": "Sarah",
                "position": "Designer",
                "skills": ["Photoshop", "Figma", "CSS"]
            }
        ],
        "locations": ["New York", "San Francisco", "London"]
    }
    
    print("Company: " + company["name"])
    print("Locations: " + str(company["locations"]))
    
    // Accessing nested data
    let first_employee = company["employees"][0]
    print("First employee: " + first_employee["name"])
    print("Position: " + first_employee["position"])
    print("Skills: " + str(first_employee["skills"]))
    
    // Iterating through nested structures
    print("\nAll employees:")
    let emp_index = 0
    while emp_index < len(company["employees"]) {
        let employee = company["employees"][emp_index]
        print("  " + employee["name"] + " - " + employee["position"])
        
        // Iterate through skills
        let skill_index = 0
        while skill_index < len(employee["skills"]) {
            print("    Skill: " + employee["skills"][skill_index])
            skill_index = skill_index + 1
        }
        emp_index = emp_index + 1
    }
    
    // Array of dictionaries
    print("\n--- Array of Dictionaries ---")
    let products = [
        {"name": "Laptop", "price": 999.99, "category": "Electronics"},
        {"name": "Book", "price": 19.99, "category": "Education"},
        {"name": "Coffee", "price": 4.99, "category": "Food"}
    ]
    
    print("Products catalog:")
    let prod_index = 0
    while prod_index < len(products) {
        let product = products[prod_index]
        print("  " + product["name"] + " - $" + str(product["price"]) + " (" + product["category"] + ")")
        prod_index = prod_index + 1
    }
    
    // Dictionary with array values
    print("\n--- Dictionary with Arrays ---")
    let inventory = {
        "electronics": ["laptop", "phone", "tablet"],
        "books": ["novel", "textbook", "magazine"],
        "food": ["apple", "bread", "milk"]
    }
    
    print("Inventory categories:")
    let categories = ["electronics", "books", "food"]
    let cat_index = 0
    while cat_index < len(categories) {
        let category = categories[cat_index]
        print("  " + category + ":")
        let items = inventory[category]
        let item_index = 0
        while item_index < len(items) {
            print("    - " + items[item_index])
            item_index = item_index + 1
        }
        cat_index = cat_index + 1
    }
    
    // Data structure operations
    print("\n--- Data Operations ---")
    let scores = [85, 92, 78, 96, 88]
    print("Test scores: " + str(scores))
    
    // Calculate average
    let sum = 0
    let score_index = 0
    while score_index < len(scores) {
        sum = sum + scores[score_index]
        score_index = score_index + 1
    }
    let average = sum / len(scores)
    print("Average score: " + str(average))
    
    // Find maximum
    let max_score = scores[0]
    let max_index = 1
    while max_index < len(scores) {
        if scores[max_index] > max_score {
            max_score = scores[max_index]
        }
        max_index = max_index + 1
    }
    print("Highest score: " + str(max_score))
    
    // Count elements meeting criteria
    let passing_count = 0
    let passing_threshold = 80
    let pass_index = 0
    while pass_index < len(scores) {
        if scores[pass_index] >= passing_threshold {
            passing_count = passing_count + 1
        }
        pass_index = pass_index + 1
    }
    print("Scores >= " + str(passing_threshold) + ": " + str(passing_count))
}